{"ast":null,"code":"import parkingData from './parkingData';\nconst initialState = {\n  value: parkingData\n};\n\nfunction addReducer(state = initialState, action) {\n  let stateValue = state.value;\n\n  switch (action.type) {\n    case 'BOOK':\n      let bookingIndex = stateValue.findIndex(x => x.number_slot === action.payload.number_slot);\n      stateValue[bookingIndex] = action.payload;\n      return { ...state,\n        value: stateValue\n      };\n\n    case 'EXIT':\n      let exitIndex = state.value.findIndex(x => x.isBooked === true && x.number_slot === action.payload.number_slot);\n      state.value[exitIndex] = action.payload;\n      return { ...state,\n        value: state.value\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default addReducer;","map":{"version":3,"sources":["/home/user/Desktop/Assignnment/src/reducer.js"],"names":["parkingData","initialState","value","addReducer","state","action","stateValue","type","bookingIndex","findIndex","x","number_slot","payload","exitIndex","isBooked"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEF;AADU,CAArB;;AAIE,SAASG,UAAT,CAAoBC,KAAK,GAAGH,YAA5B,EAA0CI,MAA1C,EAAkD;AAChD,MAAIC,UAAU,GAAGF,KAAK,CAACF,KAAvB;;AACA,UAAOG,MAAM,CAACE,IAAd;AACE,SAAK,MAAL;AACE,UAAIC,YAAY,GAAGF,UAAU,CAACG,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACC,WAAF,KAAkBN,MAAM,CAACO,OAAP,CAAeD,WAA3D,CAAnB;AACAL,MAAAA,UAAU,CAACE,YAAD,CAAV,GAA2BH,MAAM,CAACO,OAAlC;AACA,aAAO,EAAE,GAAGR,KAAL;AAAYF,QAAAA,KAAK,EAAEI;AAAnB,OAAP;;AACF,SAAK,MAAL;AACE,UAAIO,SAAS,GAAGT,KAAK,CAACF,KAAN,CAAYO,SAAZ,CAAsBC,CAAC,IAAIA,CAAC,CAACI,QAAF,KAAe,IAAf,IAAuBJ,CAAC,CAACC,WAAF,KAAkBN,MAAM,CAACO,OAAP,CAAeD,WAAnF,CAAhB;AACCP,MAAAA,KAAK,CAACF,KAAN,CAAYW,SAAZ,IAAyBR,MAAM,CAACO,OAAhC;AACD,aAAO,EAAE,GAAGR,KAAL;AAAYF,QAAAA,KAAK,EAAEE,KAAK,CAACF;AAAzB,OAAP;;AACF;AACE,aAAOE,KAAP;AAVJ;AAYD;;AAED,eAAeD,UAAf","sourcesContent":["import parkingData from './parkingData'\nconst initialState = {\n    value: parkingData,\n  };\n  \n  function addReducer(state = initialState, action) {\n    let stateValue = state.value\n    switch(action.type) {\n      case 'BOOK':\n        let bookingIndex = stateValue.findIndex(x => x.number_slot === action.payload.number_slot);\n        stateValue[bookingIndex] = action.payload;\n        return { ...state, value: stateValue };\n      case 'EXIT':\n        let exitIndex = state.value.findIndex(x => x.isBooked === true && x.number_slot === action.payload.number_slot);\n         state.value[exitIndex] = action.payload;\n        return { ...state, value: state.value };\n      default:\n        return state;\n    }\n  }\n  \n  export default addReducer;\n  "]},"metadata":{},"sourceType":"module"}